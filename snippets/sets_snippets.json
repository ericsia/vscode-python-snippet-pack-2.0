{
    "set=>": {
        "prefix": "set=>",
        "body": "set(${1:iterable})$0",
        "description": "Return a new set object"
    },
    "apply.set=>": {
        "prefix": "apply-set=>",
        "body": [
            "x = set(('apple', 'banana', 'cherry'))",
            "print(x)"
        ],
        "description": "An example for using set"
    },
    "sets.add=>": {
        "prefix": "sets-add=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "fruits.add('orange') ",
            "print(fruits)"
        ],
        "description": "An example for using add"
    },
    "sets.clear=>": {
        "prefix": "sets-clear=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "fruits.clear()",
            "print(fruits)"
        ],
        "description": "An example for using clear"
    },
    "sets.copy=>": {
        "prefix": "sets-copy=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "x = fruits.copy()",
            "print(x)"
        ],
        "description": "An example for using copy"
    },
    "sets.difference_update=>": {
        "prefix": "sets-difference_update=>",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "x.difference_update(y)",
            "print(x)"
        ],
        "description": "An example for using difference_update"
    },
    "sets.discard=>": {
        "prefix": "sets-discard=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "fruits.discard('banana') ",
            "print(fruits)"
        ],
        "description": "An example for using discard"
    },
    "sets.intersection=>1": {
        "prefix": "sets-intersection=>1",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "z = x.intersection(y)",
            "print(z)"
        ],
        "description": "An example for using intersection"
    },
    "sets.intersection=>2": {
        "prefix": "sets-intersection=>2",
        "body": [
            "x = {'a', 'b', 'c'}",
            "y = {'c', 'd', 'e'}",
            "z = {'f', 'g', 'c'}",
            "result = x.intersection(y, z)",
            "print(result)"
        ],
        "description": "An example for using intersection"
    },
    "sets.intersection_update=>1": {
        "prefix": "sets-intersection_update=>1",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "x.intersection_update(y)",
            "print(x)"
        ],
        "description": "An example for using intersection_update"
    },
    "sets.intersection_update=>2": {
        "prefix": "sets-intersection_update=>2",
        "body": [
            "x = {'a', 'b', 'c'}",
            "y = {'c', 'd', 'e'}",
            "z = {'f', 'g', 'c'}",
            "x.intersection_update(y, z)",
            "print(x)"
        ],
        "description": "An example for using intersection_update"
    },
    "sets.isdisjoint=>1": {
        "prefix": "sets-isdisjoint=>1",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'facebook'}",
            "z = ",
            "print(z)"
        ],
        "description": "An example for using isdisjoint"
    },
    "sets.isdisjoint=>2": {
        "prefix": "sets-isdisjoint=>2",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "z = x.isdisjoint(y) ",
            "print(z)"
        ],
        "description": "An example for using isdisjoint"
    },
    "sets.issubset=>1": {
        "prefix": "sets-sets.issubset=>1",
        "body": [
            "x = {'a', 'b', 'c'}",
            "y = {'f', 'e', 'd', 'c', 'b', 'a'}",
            "z = x.issubset(y) ",
            "print(z)"
        ],
        "description": "An example for using issubset"
    },
    "sets.issubset=>2": {
        "prefix": "sets-issubset=>2",
        "body": [
            "x = {'a', 'b', 'c'}",
            "y = {'f', 'e', 'd', 'c', 'b'}",
            "z = x.issubset(y) ",
            "print(z)"
        ],
        "description": "An example for using issubset"
    },
    "sets.issuperset=>1": {
        "prefix": "sets-issuperset=>1",
        "body": [
            "x = {'f', 'e', 'd', 'c', 'b', 'a'}",
            "y = {'a', 'b', 'c'}",
            "z = x.issuperset(y) ",
            "print(z)"
        ],
        "description": "An example for using issuperset"
    },
    "sets.issuperset=>2": {
        "prefix": "sets-issuperset=>2",
        "body": [
            "x = {'f', 'e', 'd', 'c', 'b'}",
            "y = {'a', 'b', 'c'}",
            "z = x.issuperset(y) ",
            "print(z)"
        ],
        "description": "An example for using issuperset"
    },
    "sets.pop=>": {
        "prefix": "sets-pop=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "fruits.pop() ",
            "print(fruits)"
        ],
        "description": "An example for using pop"
    },
    "sets.remove=>": {
        "prefix": "sets-remove=>",
        "body": [
            "fruits = {'apple', 'banana', 'cherry'}",
            "fruits.remove('banana') ",
            "print(fruits)"
        ],
        "description": "An example for using remove"
    },
    "sets.symmetric_difference=>": {
        "prefix": "sets-symmetric_difference=>",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "z = x.symmetric_difference(y) ",
            "print(z)"
        ],
        "description": "An example for using symmetric_difference"
    },
    "sets.symmetric_difference_update=>": {
        "prefix": "sets-symmetric_difference_update=>",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "x.symmetric_difference_update(y) ",
            "print(x)"
        ],
        "description": "An example for using symmetric_difference_update"
    },
    "sets.union=>1": {
        "prefix": "sets-union=>1",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "z = x.union(y) ",
            "print(z)"
        ],
        "description": "An example for using union"
    },
    "sets.union=>2": {
        "prefix": "sets-union=>2",
        "body": [
            "x = {'a', 'b', 'c'}",
            "y = {'f', 'd', 'a'}",
            "z = {'c', 'd', 'e'}",
            "result = x.union(y, z) ",
            "print(result)"
        ],
        "description": "An example for using union"
    },
    "sets.update=>": {
        "prefix": "sets-update=>",
        "body": [
            "x = {'apple', 'banana', 'cherry'}",
            "y = {'google', 'microsoft', 'apple'}",
            "x.update(y) ",
            "print(x)"
        ],
        "description": "An example for using update"
    }
}