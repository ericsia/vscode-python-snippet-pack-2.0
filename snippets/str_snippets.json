{
    "capitalize -string": {
        "prefix": ".capitalize -string",
        "body": ".capitalize()",
        "description": "Converts the first character to upper case"
    },
    "str.capitalize=>1": {
        "prefix": "str-capitalize=>1",
        "body": [
            "txt = hello, and welcome to my world.\n",
            "x = txt.capitalize()\n",
            "print(x)"
        ],
        "description": "An example for using capitalize"
    },
    "str.capitalize=>2": {
        "prefix": "str-capitalize=>2",
        "body": [
            "txt = '36 is my age.'\n",
            "x = txt.capitalize()\n",
            "print(x)"
        ],
        "description": "An example for using capitalize"
    },
    "casefold -string": {
        "prefix": ".casefold -string",
        "body": ".casefold()",
        "description": "Converts string into lower case"
    },
    "str.casefold=>": {
        "prefix": "str-casefold=>",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.casefold()\n",
            "print(x)"
        ],
        "description": "An example for using casefold"
    },
    "center -string": {
        "prefix": ".center -string",
        "body": "center(${1:length}, ${2:character})",
        "description": "Return a centered string"
    },
    "str.center=>1": {
        "prefix": "str-center=>1",
        "body": ["txt = 'banana'\n", "x = txt.center(20)\n", "print(x)"],
        "description": "An example for using center"
    },
    "str.center=>2": {
        "prefix": "str-center=>2",
        "body": ["txt = 'banana'\n", "x = txt.center(20,'O')\n", "print(x)"],
        "description": "An example for using center"
    },
    "count -string": {
        "prefix": ".count -string",
        "body": ".count(${1:string})",
        "description": "Return the number of times a specified value occurs in a string"
    },
    "str.count=>1": {
        "prefix": "str-count=>1",
        "body": [
            "txt = 'I love apples, apple are my favorite fruit'\n",
            "x = txt.count('apple')\n",
            "print(x)"
        ],
        "description": "An example for using count"
    },
    "str.count=>2": {
        "prefix": "str-count=>2",
        "body": [
            "txt = 'I love apples, apple are my favorite fruit'\n",
            "x = txt.count('apple', 10, 24)\n",
            "print(x)"
        ],
        "description": "An example for using count"
    },
    "encode -string": {
        "prefix": ".encode -string",
        "body": ".encode()",
        "description": "Return an encoded version of the string"
    },
    "str.encode=>1": {
        "prefix": "str-encode=>1",
        "body": ["txt = 'My name is MEØW'\n", "x = txt.encode()\n", "print()"],
        "description": "An example for using encode"
    },
    "str.encode=>2": {
        "prefix": "str-encode=>2",
        "body": [
            "txt = 'My name is MEØW'\n",
            "print(txt.encode(encoding='ascii',errors='backslashreplace')",
            "print(txt.encode(encoding='ascii',errors='ignore')",
            "print(txt.encode(encoding='ascii',errors='namereplace')",
            "print(txt.encode(encoding='ascii',errors='replace')",
            "print(txt.encode(encoding='ascii',errors='xmlcharrefreplace')",
            "print(txt.encode(encoding='ascii',errors='strict')"
        ],
        "description": "An example for using encode"
    },
    "endswith -string": {
        "prefix": ".endswith -string",
        "body": ".endswith(${1:string})",
        "description": "Return true if the string ends with the specified value"
    },
    "str.endswith=>1": {
        "prefix": "str-endswith=>1",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.endswith('.')\n",
            "print(x)"
        ],
        "description": "An example for using endswith"
    },
    "str.endswith=>2": {
        "prefix": "str-endswith=>2",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.endswith('my world.', 5, 11)\n",
            "print(x)"
        ],
        "description": "An example for using endswith"
    },
    "expandtabs -string": {
        "prefix": ".expandtabs -string",
        "body": ".expandtabs(${1:number})",
        "description": "Sets the tab size of the string"
    },
    "str.expandtabs=>1": {
        "prefix": "str-expandtabs=>1",
        "body": [
            "txt = 'H\te\tl\tl\to'\n",
            "x = txt.expandtabs(2)\n",
            "print(x)"
        ],
        "description": "An example for using expandtabs"
    },
    "str.expandtabs=>2": {
        "prefix": "str-expandtabs=>2",
        "body": [
            "txt = 'H\te\tl\tl\to'\n",
            "print(txt)",
            "print(txt.expandtabs())",
            "print(txt.expandtabs(2))",
            "print(txt.expandtabs(4))",
            "print(txt.expandtabs(10))"
        ],
        "description": "An example for using expandtabs"
    },
    "find -string": {
        "prefix": ".find -string",
        "body": ".find(${1:string})",
        "description": "Searches the string for a specified value and Return the position of where it was found"
    },
    "str.find=>1": {
        "prefix": "str-find=>1",
        "body": [
            "txt = 'Hello, welcome to my world.'\n",
            "x = txt.find('welcome')\n",
            "print(x)"
        ],
        "description": "An example for using find"
    },
    "str.find=>2": {
        "prefix": "str-find=>2",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.find('e')\n",
            "print(x)"
        ],
        "description": "An example for using find"
    },
    "str.find=>3": {
        "prefix": "str-find=>3",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.find('e', 5, 10)\n",
            "print(x)"
        ],
        "description": "An example for using find"
    },
    "str.find=>4": {
        "prefix": "str-find=>4",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "print(txt.find('q'))",
            "print(txt.index('q'))"
        ],
        "description": "An example for using find"
    },
    "format -string": {
        "prefix": ".format -string",
        "body": ".format($0)",
        "description": "Formats specified values in a string"
    },
    "str.format=>": {
        "prefix": "str-format=>",
        "body": [
            "# default arguments",
            "print('Hello {}, your balance is {}.'.format('Adam', 230.2346))\n",
            "# positional arguments",
            "print('Hello {0}, your balance is {1}.'.format('Adam', 230.2346))\n",
            "# keyword arguments",
            "print('Hello {name}, your balance is {blc}.'.format(name='Adam', blc=230.2346))\n",
            "# mixed arguments",
            "print('Hello {0}, your balance is {blc}.'.format('Adam', blc=230.2346))"
        ],
        "description": "An example for using format"
    },
    "format_map -string": {
        "prefix": ".format_map -string",
        "body": ".format_map($0)",
        "description": "Formats specified values in a string"
    },
    "str.format_map=>": {
        "prefix": "str-format_map=>",
        "body": [
            "point = {'x':4,'y':-5}",
            "print('{x} {y}'.format_map(point))\n",
            "point = {'x':4,'y':-5, 'z': 0}",
            "print('{x} {y} {z}'.format_map(point))"
        ],
        "description": "An example for using format_map"
    },
    "index -string": {
        "prefix": ".index -string",
        "body": ".index(${1:string})",
        "description": "Searches the string for a specified value and Return the position of where it was found"
    },
    "str.index=>1": {
        "prefix": "str-index=>1",
        "body": [
            "txt = 'Hello, welcome to my world.'\n",
            "x = txt.index('welcome')\n",
            "print(x)"
        ],
        "description": "An example for using index"
    },
    "str.index=>2": {
        "prefix": "str-index=>2",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.index('e')\n",
            "print(x)"
        ],
        "description": "An example for using index"
    },
    "str.index=>3": {
        "prefix": "str-index=>3",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "x = txt.index('e', 5, 10)\n",
            "print(x)"
        ],
        "description": "An example for using index"
    },
    "str.index=>4": {
        "prefix": "str-index=>4",
        "body": [
            "txt = 'Hello, And Welcome To My World!'\n",
            "print(txt.find('q'))",
            "print(txt.index('q'))"
        ],
        "description": "An example for using index"
    },
    "isalnum -string": {
        "prefix": ".isalnum -string",
        "body": ".isalnum()",
        "description": "Return True if all characters in the string are alphanumeric"
    },
    "str.isalnum=>1": {
        "prefix": "str-isalnum=>1",
        "body": ["txt = 'Company12'", "x = txt.isalnum()", "print(x)"],
        "description": "An example for using isalnum"
    },
    "str.isalnum=>2": {
        "prefix": "str-isalnum=>2",
        "body": ["txt = 'Company 12'", "x = txt.isalnum()", "print(x)"],
        "description": "An example for using isalnum"
    },
    "isalpha -string": {
        "prefix": ".isalpha -string",
        "body": ".isalpha()",
        "description": "Return True if all characters in the string are in the alphabet"
    },
    "str.isalpha=>": {
        "prefix": "str-isalpha=>",
        "body": ["txt = 'Company10'", "x = txt.isalpha()", "print(x)"],
        "description": "An example for using isalpha"
    },
    "isascii -string": {
        "prefix": ".isascii -string",
        "body": ".isascii()",
        "description": "Return True if empty or all characters are ASCII - new in python 3.7"
    },
    "isdecimal -string": {
        "prefix": ".isdecimal -string",
        "body": ".isdecimal()",
        "description": "Return True if all characters in the string are decimals"
    },
    "str.isdecimal=>1": {
        "prefix": "str-isdecimal=>1",
        "body": [
            "txt = '\u0033' #unicode for 3",
            "x = txt.isdecimal()",
            "print(x)"
        ],
        "description": "An example for using isdecimal"
    },
    "str.isdecimal=>2": {
        "prefix": "str-isdecimal=>2",
        "body": [
            "a = '\u0030' #unicode for 0",
            "b = '\u0047' #unicode for G",
            "print(a.isdecimal())",
            "print(b.isdecimal())"
        ],
        "description": "An example for using isdecimal"
    },
    "isdigit -string": {
        "prefix": ".isdigit -string",
        "body": ".isdigit()",
        "description": "Return True if all characters in the string are digits"
    },
    "str.isdigit=>1": {
        "prefix": "str-isdigit=>1",
        "body": ["txt = '50800'", "x = txt.isdigit()", "print(x)"],
        "description": "An example for using isdigit"
    },
    "str.isdigit=>2": {
        "prefix": "str-isdigit=>2",
        "body": [
            "a = '\u0030' #unicode for 0",
            "b = '\u00B2' #unicode for ²",
            "print(a.isdigit())",
            "print(b.isdigit())"
        ],
        "description": "An example for using isdigit"
    },
    "isidentifier -string": {
        "prefix": ".isidentifier -string",
        "body": ".isidentifier()",
        "description": "Return True if the string is an identifier"
    },
    "str.isidentifier=>1": {
        "prefix": "str-isidentifier=>1",
        "body": ["txt = 'py'", "x = txt.isidentifier()", "print(x)"],
        "description": "An example for using isidentifier"
    },
    "str.isidentifier=>2": {
        "prefix": "str-isidentifier=>2",
        "body": [
            "a = 'MyFolder'",
            "b = 'py002'",
            "c = '2bring'",
            "d = 'my py'",
            "print(a.isidentifier())",
            "print(b.isidentifier())",
            "print(c.isidentifier())",
            "print(d.isidentifier())"
        ],
        "description": "An example for using isidentifier"
    },
    "islower -string": {
        "prefix": ".islower -string",
        "body": ".islower()",
        "description": "Return True if all characters in the string are lower case"
    },
    "str.islower=>1": {
        "prefix": "str-islower=>1",
        "body": ["txt = 'hello world!'", "x = txt.islower()", "print(x)"],
        "description": "An example for using islower"
    },
    "str.islower=>2": {
        "prefix": "str-islower=>2",
        "body": [
            "a = 'Hello world!'",
            "b = 'hello 123'",
            "c = 'mynameisPeter'",
            "print(a.islower())",
            "print(b.islower())",
            "print(c.islower())"
        ],
        "description": "An example for using islower"
    },
    "isnumeric -string": {
        "prefix": ".isnumeric -string",
        "body": ".isnumeric()",
        "description": "Return True if all characters in the string are numeric"
    },
    "str.isnumeric=>1": {
        "prefix": "str-isnumeric=>1",
        "body": ["txt = '565543'", "x = txt.isnumeric()", "print(x)"],
        "description": "An example for using isnumeric"
    },
    "str.isnumeric=>2": {
        "prefix": "str-isnumeric=>2",
        "body": [
            "a = '\u0030' #unicode for 0",
            "b = '\u00B2' #unicode for &sup2;",
            "c = '10km2'",
            "print(a.isnumeric())",
            "print(b.isnumeric())",
            "print(c.isnumeric())"
        ],
        "description": "An example for using isnumeric"
    },
    "isprintable -string": {
        "prefix": ".isprintable -string",
        "body": ".isprintable()",
        "description": "Return True if all characters in the string are printable"
    },
    "str.isprintable=>1": {
        "prefix": "str-isprintable=>1",
        "body": [
            "txt = 'Hello! Are you #1?'",
            "x = txt.isprintable()",
            "print(x)"
        ],
        "description": "An example for using isprintable"
    },
    "str.isprintable=>2": {
        "prefix": "str-isprintable=>2",
        "body": [
            "txt = 'Hello!\nAre you #1?'",
            "x = txt.isprintable()",
            "print(x)"
        ],
        "description": "An example for using isprintable"
    },
    "isspace -string": {
        "prefix": ".isspace -string",
        "body": ".isspace()",
        "description": "Return True if all characters in the string are whitespaces"
    },
    "str.isspace=>1": {
        "prefix": "str-isspace=>1",
        "body": ["txt = '   '", "x = txt.isspace()", "print(x)"],
        "description": "An example for using isspace"
    },
    "str.isspace=>2": {
        "prefix": "str-isspace=>2",
        "body": ["txt = '   s   '", "x = txt.isspace()", "print(x)"],
        "description": "An example for using isspace"
    },
    "istitle -string": {
        "prefix": ".istitle -string",
        "body": ".istitle()",
        "description": "Return True if the string follows the rules of a title"
    },
    "str.istitle=>1": {
        "prefix": "str-istitle=>1",
        "body": [
            "txt = 'Hello, And Welcome To My World!'",
            "x = txt.istitle()",
            "print(x)"
        ],
        "description": "An example for using istitle"
    },
    "str.istitle=>2": {
        "prefix": "str-istitle=>2",
        "body": [
            "a = 'HELLO, AND WELCOME TO MY WORLD'",
            "b = 'Hello'",
            "c = '22 Names'",
            "d = 'This Is %'!?'",
            "print(a.istitle())",
            "print(b.istitle())",
            "print(c.istitle())",
            "print(d.istitle())"
        ],
        "description": "An example for using istitle"
    },
    "isUpper -string": {
        "prefix": ".isUpper -string",
        "body": ".isupper()",
        "description": "Return True if all characters in the string are upper case"
    },
    "str.isupper=>1": {
        "prefix": "str-isupper=>1",
        "body": ["txt = 'THIS IS NOW!'", "x = txt.isupper()", "print(x)"],
        "description": "An example for using isupper"
    },
    "str.isupper=>2": {
        "prefix": "str-isupper=>2",
        "body": [
            "a = 'Hello World!'",
            "b = 'hello 123'",
            "c = 'MY NAME IS PETER'",
            "print(a.isupper())",
            "print(b.isupper())",
            "print(c.isupper())"
        ],
        "description": "An example for using isupper"
    },
    "join -string": {
        "prefix": ".join -string",
        "body": ".join(${1:iterable})",
        "description": "Joins the elements of an iterable to the end of the string"
    },
    "str.join=>1": {
        "prefix": "str-join=>1",
        "body": [
            "myTuple = ('John', 'Peter', 'Vicky')",
            "x = '#'.join(myTuple)",
            "print(x)"
        ],
        "description": "An example for using join"
    },
    "str.join=>2": {
        "prefix": "str-join=>2",
        "body": [
            "myDict = {'name': 'John', 'country': 'Norway'}",
            "mySeparator = 'TEST'",
            "x = mySeparator.join(myDict)",
            "print(x)"
        ],
        "description": "An example for using join"
    },
    "ljust -string": {
        "prefix": ".ljust -string",
        "body": ".ljust(${1:number})",
        "description": "Return a left justified version of the string"
    },
    "str.ljust=>1": {
        "prefix": "str-ljust=>1",
        "body": [
            "txt = 'banana'",
            "x = txt.ljust(20)",
            "print(x, 'is my favorite fruit.')"
        ],
        "description": "An example for using ljust"
    },
    "str.ljust=>2": {
        "prefix": "str-ljust=>2",
        "body": ["txt = 'banana'", "x = txt.ljust(20, 'O')", "print(x)"],
        "description": "An example for using ljust"
    },
    "lower -string": {
        "prefix": ".lower -string",
        "body": ".lower()",
        "description": "Converts a string into lower case"
    },
    "str.lower=>": {
        "prefix": "str-lower=>",
        "body": ["txt = 'Hello my FRIENDS'", "x = txt.lower()", "print(x)"],
        "description": "An example for using lower"
    },
    "lstrip -string": {
        "prefix": ".lstrip -string",
        "body": ".lstrip(${1:leading_characters})",
        "description": "Return a left trim version of the string"
    },
    "str.lstrip=>1": {
        "prefix": "str-lstrip=>1",
        "body": [
            "txt = '     banana     '",
            "x = txt.lstrip()",
            "print('of all fruits', x, 'is my favorite')"
        ],
        "description": "An example for using lstrip"
    },
    "str.lstrip=>2": {
        "prefix": "str-lstrip=>2",
        "body": [
            "txt = ',,,,,ssaaww.....banana'",
            "x = txt.lstrip(',.asw')",
            "print(x)"
        ],
        "description": "An example for using lstrip"
    },
    "maketrans -string": {
        "prefix": ".maketrans -string",
        "body": ".maketrans($0)",
        "description": "Return a translation table to be used in translations"
    },
    "str.maketrans=>1": {
        "prefix": "str-maketrans=>1",
        "body": [
            "# example dictionary",
            "dict = {'a': '123', 'b': '456', 'c': '789'}",
            "string = 'abc'",
            "print(str.maketrans(dict))"
        ],
        "description": "An example for using maketrans"
    },
    "str.maketrans=>2": {
        "prefix": "str-maketrans=>2",
        "body": [
            "# example dictionary",
            "dict = {97: '123', 98: '456', 99: '789'}",
            "string = 'abc'",
            "print(str.maketrans(dict))"
        ],
        "description": "An example for using maketrans"
    },
    "partition -string": {
        "prefix": ".partition -string",
        "body": ".partition(${1:string})",
        "description": "Return a tuple where the string is parted into three parts"
    },
    "str.partition=>1": {
        "prefix": "str-partition=>1",
        "body": [
            "txt = 'I could eat bananas all day'",
            "x = txt.partition('bananas')",
            "print(x)"
        ],
        "description": "An example for using partition"
    },
    "str.partition=>2": {
        "prefix": "str-partition=>2",
        "body": [
            "txt = 'I could eat bananas all day'",
            "x = txt.partition('apples')",
            "print(x)"
        ],
        "description": "An example for using partition"
    },
    "removeprefix -string": {
        "prefix": ".removeprefix -string",
        "body": ".removeprefix(${1:string})",
        "description": "Return remaining string when the front value is found\n\"hi is hi\",removeprefix(\"hi\") reult: is hi"
    },
    "removesuffix -string": {
        "prefix": ".removesuffix -string",
        "body": ".removesuffix(${1:string})",
        "description": "Return remaining string when the end value is found\n\"hi is hi\",removesuffix(\"hi\") reult:hi is "
    },
    "replace -string": {
        "prefix": ".replace -string",
        "body": ".replace(${1:old}, ${2:new})",
        "description": "Return a string where a specified value is replaced with a specified value"
    },
    "str.replace=>1": {
        "prefix": "str-replace=>1",
        "body": [
            "txt 'I like bananas'",
            "x = txt.replace('bananas', 'apples')",
            "print(x)"
        ],
        "description": "An example for using replace"
    },
    "str.replace=>2": {
        "prefix": "str-replace=>2",
        "body": [
            "txt = 'one one was a race horse, two two was one too.'",
            "x = txt.replace('one', 'three')",
            "print(x)"
        ],
        "description": "An example for using replace"
    },
    "str.replace=>3": {
        "prefix": "str-replace=>3",
        "body": [
            "txt = 'one one was a race horse, two two was one too.'",
            "x = txt.replace('one', 'three', 2)",
            "print(x)"
        ],
        "description": "An example for using replace"
    },
    "rfind -string": {
        "prefix": ".rfind -string",
        "body": ".rfind(${1:string})",
        "description": "Searches the string for a specified value and Return the last position of where it was found"
    },
    "str.rfind=>1": {
        "prefix": "str-rfind=>1",
        "body": [
            "txt = 'Mi casa, su casa.'",
            "x = txt.rfind('casa')",
            "print(x)"
        ],
        "description": "An example for using rfind"
    },
    "str.rfind=>2": {
        "prefix": "str-rfind=>2",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.rfind('e')",
            "print(x)"
        ],
        "description": "An example for using rfind"
    },
    "str.rfind=>3": {
        "prefix": "str-rfind=>3",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.rfind('e', 5, 10)",
            "print(x)"
        ],
        "description": "An example for using rfind"
    },
    "str.rfind=>4": {
        "prefix": "str-rfind=>4",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "print(txt.rfind('q'))",
            "print(txt.rindex('q'))"
        ],
        "description": "An example for using rfind"
    },
    "rindex -string": {
        "prefix": ".rindex -string",
        "body": ".rindex(${1:string})",
        "description": "Searches the string for a specified value and Return the last position of where it was found"
    },
    "str.rindex=>1": {
        "prefix": "str-rindex=>1",
        "body": [
            "txt = 'Mi casa, su casa.'",
            "x = txt.rindex('casa')",
            "print(x)"
        ],
        "description": "An example for using rindex"
    },
    "str.rindex=>2": {
        "prefix": "str-rindex=>2",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.rindex('e')",
            "print(x)"
        ],
        "description": "An example for using rindex"
    },
    "str.rindex=>3": {
        "prefix": "str-rindex=>3",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.rindex('e', 5, 10)",
            "print(x)"
        ],
        "description": "An example for using rindex"
    },
    "str.rindex=>4": {
        "prefix": "str-rindex=>4",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "print(txt.rfind('q'))",
            "print(txt.rindex('q'))"
        ],
        "description": "An example for using rindex"
    },
    "rjust -string": {
        "prefix": ".rjust -string",
        "body": ".rjust(${1:number})",
        "description": "Return a right justified version of the string"
    },
    "rpartition -string": {
        "prefix": ".rpartition -string",
        "body": ".rpartition(${1:string})",
        "description": "Return a tuple where the string is parted into three parts"
    },
    "str.rpartition=>1": {
        "prefix": "str-rpartition=>1",
        "body": [
            "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
            "x = txt.rpartition('bananas')",
            "print(x)"
        ],
        "description": "An example for using rpartition"
    },
    "str.rpartition=>2": {
        "prefix": "str-rpartition=>2",
        "body": [
            "txt = 'I could eat bananas all day, bananas are my favorite fruit'",
            "x = txt.rpartition('apples')",
            "print(x)"
        ],
        "description": "An example for using rpartition"
    },
    "rsplit -string": {
        "prefix": ".rsplit -string",
        "body": "rsplit(${1:separator}, ${2:maxsplit})",
        "description": "Return a right trim version of the string"
    },
    "str.rsplit=>1": {
        "prefix": "str-rsplit=>1",
        "body": [
            "txt = 'apple, banana, cherry'",
            "x = txt.rsplit(', ')",
            "print(x)"
        ],
        "description": "An example for using rsplit"
    },
    "str.rsplit=>2": {
        "prefix": "str-rsplit=>2",
        "body": [
            "txt = 'apple, banana, cherry'",
            "# setting the max parameter to 1, will return a list with 2 elements!",
            "x = txt.rsplit(', ', 1)",
            "print(x)"
        ],
        "description": "An example for using rsplit"
    },
    "rstrip -string": {
        "prefix": ".rstrip -string",
        "body": "rstrip(${1:trailing_characters})",
        "description": "Return a right trim version of the string"
    },
    "str.rstrip=>": {
        "prefix": "str-rstrip=>",
        "body": [
            "txt = 'banana,,,,,ssaaww.....'",
            "x = txt.rstrip(',.asw')",
            "print(x)"
        ],
        "description": "An example for using rsplit"
    },
    "split -string": {
        "prefix": ".split -string",
        "body": "split(${1:separator}, ${2:maxsplit})",
        "description": "Splits the string at the specified separator, and Return a list"
    },
    "str.split=>1": {
        "prefix": "str-split=>1",
        "body": [
            "txt = 'welcome to the jungle'",
            "x = txt.split()",
            "print(x)"
        ],
        "description": "An example for using split"
    },
    "str.split=>2": {
        "prefix": "str-split=>2",
        "body": [
            "txt = 'hello, my name is Peter, I am 26 years old'",
            "x = txt.split(', ')",
            "print(x)"
        ],
        "description": "An example for using split"
    },
    "str.split=>3": {
        "prefix": "str-split=>3",
        "body": [
            "txt = 'apple#banana#cherry#orange'",
            "x = txt.split('#')",
            "print(x)"
        ],
        "description": "An example for using split"
    },
    "str.split=>4": {
        "prefix": "str-split=>4",
        "body": [
            "txt = 'apple#banana#cherry#orange'",
            "# setting the max parameter to 1, will return a list with 2 elements!",
            "x = txt.split('#', 1)",
            "print(x)"
        ],
        "description": "An example for using split"
    },
    "splitlines -string": {
        "prefix": ".splitlines -string",
        "body": ".splitlines()",
        "description": "Splits the string at line breaks and Return a list"
    },
    "str.splitlines=>1": {
        "prefix": "str-splitlines=>1",
        "body": [
            "txt = 'Thank you for the music\nWelcome to the jungle'",
            "x = txt.splitlines()",
            "print(x)"
        ],
        "description": "An example for using splitlines"
    },
    "str.splitlines=>2": {
        "prefix": "str-splitlines=>2",
        "body": [
            "txt = 'Thank you for the music\nWelcome to the jungle'",
            "x = txt.splitlines(True)",
            "print(x)"
        ],
        "description": "An example for using splitlines"
    },
    "startswith -string": {
        "prefix": ".startswith -string",
        "body": ".startswith(${1:string})",
        "description": "Return true if the string starts with the specified value"
    },
    "str.startswith=>1": {
        "prefix": "str-startswith=>1",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.startswith('Hello')",
            "print(x)"
        ],
        "description": "An example for using startswith"
    },
    "str.startswith=>2": {
        "prefix": "str-startswith=>2",
        "body": [
            "txt = 'Hello, welcome to my world.'",
            "x = txt.startswith('wel', 7, 20)",
            "print(x)"
        ],
        "description": "An example for using startswith"
    },
    "strip -string": {
        "prefix": ".strip -string",
        "body": "strip(${1:trailing_characters})",
        "description": "Return a start and end trim version of the string"
    },
    "swapcase -string": {
        "prefix": ".swapcase -string",
        "body": ".swapcase()",
        "description": "Swaps cases, lower case becomes upper case and vice versa"
    },
    "str.swapcase=>": {
        "prefix": "str-swapcase=>",
        "body": [
            "txt = 'Hello My Name Is PETER'",
            "x = txt.swapcase()",
            "print(x)"
        ],
        "description": "An example for using swapcase"
    },
    "title -string": {
        "prefix": ".title -string",
        "body": ".title()",
        "description": "Converts the first character of each word to upper case"
    },
    "str.title=>1": {
        "prefix": "str-title=>1",
        "body": ["txt = 'Welcome to my world'", "x = txt.title()", "print(x)"],
        "description": "An example for using title"
    },
    "str.title=>2": {
        "prefix": "str-title=>2",
        "body": [
            "txt = 'Welcome to my 2nd world'",
            "x = txt.title()",
            "print(x)"
        ],
        "description": "An example for using title"
    },
    "str.title=>3": {
        "prefix": "str-title=>3",
        "body": [
            "txt = 'hello b2b2b2 and 3g3g3g'",
            "x = txt.title()",
            "print(x)"
        ],
        "description": "An example for using title"
    },
    "translate -string": {
        "prefix": ".translate -string",
        "body": ".translate(${1:translation})",
        "description": "Return a translated string"
    },
    "str.translate=>": {
        "prefix": "str-translate=>",
        "body": [
            "# translation table - a dictionary",
            "translation = {97: None, 98: None, 99: 105}\n",
            "string = 'abcdef'",
            "print('Original string:', string)\n",
            "# translate string",
            "print('Translated string:', str.translate(translation))"
        ],
        "description": "An example for using translate"
    },
    "upper -string": {
        "prefix": ".upper -string",
        "body": ".upper()",
        "description": "Converts a string into upper case"
    },
    "str.upper=>": {
        "prefix": "str-upper=>",
        "body": ["txt = 'Hello my friends'", "x = txt.upper()", "print(x)"],
        "description": "An example for using upper"
    },
    "zfill -string": {
        "prefix": ".zfill -string",
        "body": ".zfill(${1:number})",
        "description": "Fills the string with a specified number of 0 values at the beginning"
    },
    "str.zfill=>": {
        "prefix": "str-zfill=>",
        "body": ["txt = '50'", "x = txt.zfill(10)", "print(x)"],
        "description": "An example for using zfill"
    }
}
